#+title: DROID metapatch

* Introduction
This is an work in progress of creating a more pythonic patch generator for the DROID system.

The goal is to create an intuitive patch generator while using modern python features.

I am not expecting this library to be included in DROID, instead I suggest
installing it as a python module, and importing it. It should be compatible with
how the Forge expects these scripts to behave.

* Getting started


* Reference
The patch generator is implemented as a single "dynamic" class. There's a lot
going on in the background to set up typing and so on, but the end result is a
simple userfriendly python superclass, that should be easy to extend to generate
patches.
 gg
It should work in a way where modern text editors should be able to assist.

** Defining your patch class

#+begin_src python
import metapatch

class MegaDroneMeta(metapatch.PatchGenerator):
    """Megadrone patch."""
    title = "Megadrone"
    description = "E4 based drone generator."
    voices: str = metapatch.option("Number of voices", choices=[("4", "4 voices"), ("8", "8 voices")])
    midi: bool = metapatch.option("Enable midi")
    channel: str = metapatch.option("Midi channel", minimum=1, maximum=16)
    encoder1: int = metapatch.option("Module number for first E4 module", minimum=2, maximum=5)
    encoder2: int = metapatch.option("Module number for second E4 module", minimum=2, maximum=5)
    encoder3: int = metapatch.option("Module number for third E4 module", minimum=2, maximum=5)
    encoder4: int = metapatch.option("Module number for fourth encoder", minimum=2, maximum=5)
    default = metapatch.preset("My own defaults", default_preset)
#+end_src

** Options
Any class variable defined as an =option()= will automatically be exposed in the configuration wizard.

If the =minimum= and =maximum= parameters are selected, the variable will be cast as an integer, if choices are provided, it will be cast as a string.

If none of these options are defined, it's a boolean option.

You should use the type hints when defining your instance variables. This makes it easier for your editor to provide proper completion.

** Presets

Presets are defined with the =preset(name, parameters)= function.

#+begin_src python
def preset(title: str, parameters: Dict[str, Any]) -> Preset:
    """Define a preset.

    Args:
        title: The name of the preset.
        parameter: A dictionary containing parameter to value mappings.
    """
#+end_src

** The patch generator main function.

The main logic must be defined with the function =generate()=.
The parameters for the patch can be used as instance variables directly, so if you provided an option called =use_midi=, that will be available as =self.use_midi= with the right type.

It has two handy helper functions: =add_controller()= and =add_circuit=.

These are the main functions to manipulate the final patch.

Example:

#+begin_src python
class MyPatch(metapatch.PatchGenerator):
    """My patch generator."""

    number_of_buttons: int = metapatch.option("Number of buttons", minimum=8, maximum=32)

    def generator(self) -> None:
        """Generate Patch"""
        self.add_controller("B32", 1)
        for num in range(1, self.number_of_buttons + 1):
            self.add_circuit("button", {"button": f"B1.{num}", "led": f"L1.{num}"})

#+end_src

At the end of your patch generator, you must run the =run()= class method.
This ensures that commmand line arguments are collected.

#+begin_src python
class MyPatch(metapatch.PatchGenerator):
    ...

if __name__ == "__main__":
        MyPatch.run()
#+end_src

** Sections

There are two ways to add sections to your patches.
The first way is simple, and does not support comments in the section, and that is done by simply setting which section you work on:

#+begin_src python
    def generate(self) -> None:
        """Generate patch."""
        self.add_controller("P2B8", position=1)
        if self.clock_source == "internal":
            self.section = "Master Clock"
            self.add_circuit(
                "lfo",
                params={"hz": "40 * P1.1", "square": "N1"},
                comment=(
                    "Send the clock to the normalization of input 1. In the rest of the"
                    " patch, I1 will be used as input, and you can override the "
                    "internal clock by patching an external in."
                ),
            )
#+end_src

If you want a comment in your section, you can use the =add_section()= function instead:
#+begin_src python
    def generate(self) -> None:
        """Generate patch."""
        self.add_controller("P2B8", position=1)
        self.add_section("Master clock", "This section contains an LFO that acts as the master clock")

#+end_src

* Examples
Two examples are included:

+ examples/e4megadrone
+ examples/arpeggio1

The arpeggio1 is adapted from the =arpeggio1.ini= example bundled with DROID, while the megadrone is an example made by me.

The arpeggio1 is probably simplest example to use, if you are just getting started.
